from typing import Dict, List, Tuple, Union
from datetime import datetime
import numpy as np
from elasticsearch import Elasticsearch
from mage_ai.data_preparation.variable_manager import set_global_variable
from sentence_transformers import SentenceTransformer
import numpy as np
model_name = 'multi-qa-distilbert-cos-v1'
embedding_model = SentenceTransformer(model_name)

if 'data_exporter' not in globals():
    from mage_ai.data_preparation.decorators import data_exporter


@data_exporter
def elasticsearch(
    documents: List[Dict[str, Union[Dict, List[int], np.ndarray, str]]], *args, **kwargs,
):
    """
    Exports document data to an Elasticsearch database.
    """
    embedded_documents = []
    embeddings = []
    for doc in documents:
       question = doc['question']
       text = doc['text']
       qa_text = f'{question} {text}'
       doc["qa_embedding"] = embedding_model.encode(qa_text)
       embeddings.append(doc["qa_embedding"])
       embedded_documents.append(doc)

    X = np.array(embeddings)
    print(X.shape)

    connection_string = kwargs.get('connection_string', 'http://elasticsearch:9200')
    # changes
    index_name_prefix = kwargs.get('index_name', 'documents')
    current_time = datetime.now().strftime("%Y%m%d_%M%S")
    index_name = f"{index_name_prefix}_{current_time}"
    
    print("index name:", index_name)
    set_global_variable('llm_zoomcamp', 'index_name', index_name)
    # Changes
    number_of_shards = kwargs.get('number_of_shards', 1)
    number_of_replicas = kwargs.get('number_of_replicas', 0)
    vector_column_name = kwargs.get('vector_column_name', 'qa_embedding')

    dimensions = kwargs.get('dimensions')
    if dimensions is None and len(documents) > 0:
        document = documents[0]
        dimensions = len(document.get(vector_column_name) or [])

    es_client = Elasticsearch(connection_string)

    print(f'Connecting to Elasticsearch at {connection_string}')

    index_settings = {
        "settings": {
            "number_of_shards": number_of_shards,
            "number_of_replicas": number_of_replicas
        },
        "mappings": {
            "properties": {
                "text": {"type": "text"},
                "section": {"type": "text"},
                "question": {"type": "text"},
                "course": {"type": "keyword"},
                "document_id": {"type": "keyword"},
                "qa_embedding": {
                    "type": "dense_vector",
                    "dims": 768,
                    "index": True,
                    "similarity":
                    "cosine"
                }
            }
        }
    }

    if not es_client.indices.exists(index=index_name):
        es_client.indices.create(index=index_name)
        print('Index created with properties:', index_settings)
        print('Embedding dimensions:', dimensions)

    print(f'Indexing {len(documents)} documents to Elasticsearch index {index_name}')
    for document in documents:
        print(f'Indexing document {document["document_id"]}')

        es_client.index(index=index_name, document=document)
    print(document)
